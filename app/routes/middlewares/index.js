// Generated by CoffeeScript 1.7.1
var aAuth, async, auth, ctrl, fEnqueue, kue, logModel, path, utils;

path = require('path');

async = require('async');

utils = process.g.utils;

ctrl = utils.getCtrl('index');

auth = utils.getCtrl('auth');

kue = utils.getCtrl('kue');

logModel = utils.getCtrl('logModel');

aAuth = {};

fEnqueue = function(req, res) {
  var appID, oLogTemp, sLogType;
  sLogType = req.query.type;
  appID = req.query.appID;
  delete req.query.type;
  delete req.query.appID;
  delete req.query.token;
  oLogTemp = {
    type: sLogType,
    appID: appID,
    log: req.query
  };
  kue.enqueueLog(oLogTemp);
  return res.requestSucceed('数据提交成功');
};

module.exports = {
  distribute: function(req, res, next) {
    var appID, sLogModelName, sLogType, token, ts;
    sLogType = req.query.type;
    appID = req.query.appID;
    token = req.query.token;
    ts = req.query.ts;
    sLogModelName = "" + appID + "." + sLogType;
    if (!sLogType) {
      return res.requestError('缺少type');
    } else if (!ts) {
      return res.requestError('缺少ts');
    } else if (!appID) {
      return res.requestError('缺少appID');
    } else if (!token) {
      return res.requestError('缺少token');
    } else {
      if (aAuth[sLogModelName]) {
        if (aAuth[sLogModelName] === token) {
          return fEnqueue(req, res);
        } else {
          return res.requestError('授权信息错误');
        }
      } else {
        return async.waterfall([
          function(cb) {
            return auth.checkAuth({
              appID: appID,
              token: token
            }, function(err, bAuthorized) {
              if (!err) {
                if (bAuthorized) {
                  return cb(null, null);
                } else {
                  return cb('应用未授权');
                }
              } else {
                return cb('授权信息检验失败');
              }
            });
          }, function(result, cb) {
            return logModel.checkLogModel({
              appID: appID,
              sLogType: sLogType
            }, function(err, bLogModel) {
              if (!err) {
                if (bLogModel) {
                  return cb(null, null);
                } else {
                  return cb('日志模型不存在');
                }
              } else {
                return cb('日志模型检验失败');
              }
            });
          }
        ], function(err, result) {
          if (!err) {
            aAuth[sLogModelName] = token;
            return fEnqueue(req, res);
          } else {
            return res.requestError(err);
          }
        });
      }
    }
  }
};
