// Generated by CoffeeScript 1.7.1
var LOG_DEFAULT_LEVEL, LOG_LEVEL, aLogLevelValue, async, auth, basicAuth, config, ctrl, fEnqueue, i, kue, logModel, oAuth, path, utils, _;

path = require('path');

async = require('async');

_ = require('lodash');

basicAuth = require('connect-basic-auth');

config = process.g.config;

utils = process.g.utils;

ctrl = utils.getCtrl('index');

auth = utils.getCtrl('auth');

kue = utils.getCtrl('kue');

logModel = utils.getCtrl('logModel');

LOG_LEVEL = config.LOG.level;

LOG_DEFAULT_LEVEL = LOG_LEVEL[config.LOG.defaultLevel];

aLogLevelValue = _.values(LOG_LEVEL);

oAuth = {};

fEnqueue = function(req, res) {
  var oLog, oLogTemp, sAppID, sLogName;
  sAppID = req.params.appID;
  sLogName = req.params.name;
  oLog = _.cloneDeep(req.body);
  oLog._level = Number(oLog._level);
  oLog._ts = Number(new Date());
  if (_.indexOf(aLogLevelValue, oLog._level) === -1) {
    oLog._level = LOG_DEFAULT_LEVEL;
  }
  oLogTemp = {
    appID: sAppID,
    name: sLogName,
    log: oLog
  };
  kue.enqueueLog(oLogTemp);
  return res.success('数据提交成功');
};

i = 1;

module.exports = {
  distribute: function(req, res, next) {
    var oBody, sAppID, sFullLogName, sLogName, sToken;
    oBody = req.body;
    sAppID = req.params.appID;
    sLogName = req.params.name;
    sToken = req.params.token;
    sFullLogName = "" + sAppID + "." + sLogName;
    if (!sAppID) {
      return res.error('缺少appID');
    } else if (!sLogName) {
      return res.error('缺少日志名');
    } else if (!sToken) {
      return res.error('缺少秘钥');
    } else {
      if (oAuth[sFullLogName]) {
        if (oAuth[sFullLogName] === sToken) {
          return fEnqueue(req, res);
        } else {
          return res.error('授权信息错误');
        }
      } else {
        return async.waterfall([
          function(cb) {
            return auth._checkAuth({
              appID: sAppID,
              token: sToken
            }, function(err, bAuthorized) {
              if (!err) {
                if (bAuthorized) {
                  return cb(null, null);
                } else {
                  return cb('应用未授权');
                }
              } else {
                return cb('授权信息检验失败');
              }
            });
          }, function(result, cb) {
            return logModel.checkLogModel({
              appID: sAppID,
              name: sLogName
            }, function(err, bLogModel) {
              if (!err) {
                if (bLogModel) {
                  return cb(null, null);
                } else {
                  return cb('日志模型不存在');
                }
              } else {
                return cb('日志模型检验失败');
              }
            });
          }
        ], function(err, result) {
          if (!err) {
            oAuth[sFullLogName] = sToken;
            return fEnqueue(req, res);
          } else {
            return res.error(err);
          }
        });
      }
    }
  },
  basicAuth: function() {
    return basicAuth(function(credentials, req, res, next) {
      if (credentials && credentials.username === "cer" && credentials.password === "site") {
        return next();
      } else {
        if (!credentials) {
          console.log("credentials not provided");
        }
        if (credentials && credentials.username) {
          console.log("credentials-username:" + credentials.username);
        }
        if (credentials && credentials.password) {
          console.log("credentials-password:" + credentials.username);
        }
        return next("Unautherized!");
      }
    });
  }
};
