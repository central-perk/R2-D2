// Generated by CoffeeScript 1.7.1
var config, fs, logger, modelsPath, path, storage, utils, _;

path = require('path');

fs = require('fs');

_ = require('lodash');

config = process.g.config;

utils = process.g.utils;

logger = require(path.join(__dirname, 'log'));

storage = require(path.join(__dirname, 'storage'));

modelsPath = path.join(process.g.modelsPath, 'mapping');

module.exports = {
  storage: function(req, res) {
    return storage(function(err) {
      if (!err) {
        return res.requestSucceed('数据已经被更新');
      } else {
        return res.requestError('数据更新失败');
      }
    }, true);
  },
  openLogin: function(req, res) {
    var log;
    log = new logger('login');
    return log(req.query, function(err) {
      if (!err) {
        return res.requestSucceed('数据提交成功');
      } else {
        return res.requestError('fail');
      }
    });
  },
  list: function(model) {
    return function(req, res) {
      var Dao, criteria, page, perPage;
      page = (req.param('page') || 0) > 0 ? req.param('page') : 1;
      perPage = config.PERPAGE;
      criteria = {
        query: {},
        options: {
          page: page - 1,
          perPage: perPage
        }
      };
      Dao = require(process.g.daoPath)[model];
      return Dao.count(criteria, function(err, count) {
        return Dao.list(criteria, {
          'timestamp': -1
        }, function(err, docs) {
          var data, documents, keys;
          if (!err) {
            documents = [];
            if (docs.length) {
              keys = _.keys(docs[0]._doc);
              _.each(docs, function(doc, index) {
                var key, _i, _len, _results;
                documents[index] = {};
                _results = [];
                for (_i = 0, _len = keys.length; _i < _len; _i++) {
                  key = keys[_i];
                  if (key !== 'timestamp') {
                    _results.push(documents[index][key] = doc[key]);
                  } else {
                    _results.push(documents[index]['timestamp'] = utils.formatTime(doc.timestamp));
                  }
                }
                return _results;
              });
            }
            data = {};
            data[model + 's'] = documents;
            data['pagination'] = utils.pagination(page, perPage, count);
            return res.requestSucceed(data || null);
          } else {
            return res.requestError('获取列表失败');
          }
        });
      });
    };
  }
};
