// Generated by CoffeeScript 1.7.1
var LOGFILE_STATUS, config, fCheckLogSize, fCreateLogFile, fWriteFile, fWriteableLog, fs, logFileDao, logsPath, path, utils;

path = require('path');

fs = require('fs-extra');

utils = process.g.utils;

config = process.g.config;

LOGFILE_STATUS = config.STATUS.LOGFILE;

logsPath = process.g.logsPath;

logFileDao = require(process.g.daoPath).logFile;

fWriteableLog = function(sFullLogName, callback) {
  var sAppID, sLogName;
  sAppID = sFullLogName.split('.')[0];
  sLogName = sFullLogName.split('.')[1];
  return logFileDao.getOne({
    appID: sAppID,
    name: sLogName,
    status: LOGFILE_STATUS.writeable
  }, function(err, oLogFile) {
    var bLogFileSizeOK, sLogFileName, sLogFilePath;
    if (!err) {
      if (oLogFile) {
        sLogFileName = oLogFile.fileName;
        sLogFilePath = path.join(logsPath, sLogFileName);
        bLogFileSizeOK = fCheckLogSize(sLogFilePath);
        if (bLogFileSizeOK) {
          return callback(null, sLogFilePath);
        } else {
          logFileDao.update({
            fileName: sLogFileName
          }, {
            status: LOGFILE_STATUS.unstorage
          }, function(err, doc) {
            var kue;
            if (config.STORAGE.delay) {
              kue = utils.getCtrl('kue');
              return setTimeout(function() {
                return kue.enqueueStorage({
                  logFileName: sLogFileName,
                  status: LOGFILE_STATUS.unstorage
                });
              }, config.STORAGE.delay);
            }
          });
          return fCreateLogFile(sFullLogName, callback);
        }
      } else {
        return fCreateLogFile(sFullLogName, callback);
      }
    } else {
      return callback('日志文件查询失败');
    }
  });
};

fCheckLogSize = function(sLogFilePath) {
  var e, nSize;
  try {
    nSize = fs.readFileSync(sLogFilePath, 'utf8').length;
    return config.LOG_MAX_SIZE > nSize;
  } catch (_error) {
    e = _error;
    return false;
  }
};

fCreateLogFile = function(sFullLogName, callback) {
  var sAppID, sLogFileName, sLogFilePath, sLogName;
  sAppID = sFullLogName.split('.')[0];
  sLogName = sFullLogName.split('.')[1];
  sLogFileName = "" + sFullLogName + "." + (utils.getTime()) + ".log";
  console.log(sLogFileName);
  sLogFilePath = path.join(logsPath, sLogFileName);
  fs.createFileSync(sLogFilePath);
  return logFileDao.create({
    appID: sAppID,
    name: sLogName,
    fileName: sLogFileName
  }, function(err, raw) {
    return callback(err, sLogFilePath);
  });
};

fWriteFile = function(sLogFilePath) {
  return function(message, cb) {
    var sLogFileName;
    sLogFileName = path.basename(sLogFilePath);
    message.fileName = sLogFileName;
    message = JSON.stringify(message, null, 0) + '\n';
    if (!fs.existsSync(sLogFilePath)) {
      createFileSync(sLogFilePath);
    }
    return fs.writeFile(sLogFilePath, message, {
      encoding: 'utf8',
      flag: 'a'
    }, cb);
  };
};

module.exports = function(sFullLogName, callback) {
  return fWriteableLog(sFullLogName, function(err, sLogFilePath) {
    return callback(err, fWriteFile(sLogFilePath));
  });
};
