// Generated by CoffeeScript 1.7.1
var AUTH_STATUS, authDao, config, createAppID, createToken, crypto, fMd5;

crypto = require('crypto');

config = process.g.config;

AUTH_STATUS = config.STATUS.AUTH;

authDao = require(process.g.daoPath).auth;

fMd5 = function(text) {
  return crypto.createHash('md5').update(text).digest('hex');
};

createToken = function(appName) {
  var nRandom, text;
  nRandom = Math.random();
  text = appName + nRandom;
  return fMd5(text);
};

createAppID = function(appName) {
  return createToken(appName).slice(0, 6);
};

module.exports = {
  create: function(req, res) {
    var appName;
    appName = req.body.appName;
    return authDao.getOne({
      appName: appName
    }, function(err, auth) {
      var appID, token;
      if (!auth) {
        appID = createAppID(appName);
        token = createToken(appName);
        return authDao.getOne({
          appID: appID
        }, function(err, auth) {
          if (!auth) {
            return authDao.create({
              appName: appName,
              appID: appID,
              token: token
            }, function(err, raw) {
              if (!err) {
                return res.requestSucceed({
                  appName: appName,
                  appID: appID,
                  token: token
                });
              } else {
                return res.requestError('授权失败');
              }
            });
          } else {
            return module.exports['create'](req, res);
          }
        });
      } else {
        appID = auth.appID;
        token = auth.token;
        return res.requestSucceed({
          appName: appName,
          appID: appID,
          token: token
        });
      }
    });
  },
  list: function(req, res) {
    var criteria;
    criteria = {
      query: {
        status: AUTH_STATUS.enable
      }
    };
    return authDao.list(criteria, {
      ts: -1
    }, function(err, auths) {
      if (!err) {
        return res.requestSucceed(auths);
      } else {
        return res.requestError('授权列表获取失败');
      }
    });
  },
  checkAuth: function(query, callback) {
    var appID, token;
    appID = query.appID;
    token = query.token;
    return authDao.getOne({
      appID: appID,
      token: token
    }, function(err, auth) {
      var bAuthorized;
      bAuthorized = auth ? true : false;
      return callback(err, bAuthorized);
    });
  }
};
