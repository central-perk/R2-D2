// Generated by CoffeeScript 1.7.1
var Schema, async, auth, config, logModel, logModelDao, mongoose, oAttrValueMap, utils;

async = require('async');

mongoose = require('mongoose');

Schema = mongoose.Schema;

logModel = mongoose.model('logModel');

logModelDao = require(process.g.daoPath).logModel;

config = process.g.config;

utils = process.g.utils;

auth = utils.getCtrl('auth');

oAttrValueMap = {
  String: String,
  Number: Number,
  Boolean: Boolean,
  Date: Date
};

module.exports = {
  create: function(req, res) {
    var aAttributes, appID, sLogType, token;
    appID = req.body.appID;
    token = req.body.token;
    sLogType = req.body.type;
    aAttributes = req.body.attributes;
    if (!appID) {
      return res.requestError('缺少应用ID');
    } else if (!token) {
      return res.requestError('缺少token');
    } else if (!sLogType) {
      return res.requestError('缺少日志类型');
    } else if (sLogType.length > 20) {
      return res.requestError('日志类型的长度不符');
    } else {
      return async.waterfall([
        function(cb) {
          return auth._checkAuth({
            appID: appID,
            token: token
          }, function(err, bAuthorized) {
            if (!err) {
              if (bAuthorized) {
                return cb(null, null);
              } else {
                return cb('应用未授权');
              }
            } else {
              return cb('日志模型创建失败');
            }
          });
        }, function(result, cb) {
          return logModelDao.getOne({
            appID: appID,
            type: sLogType
          }, function(err, oLogModel) {
            if (!err) {
              if (!oLogModel) {
                return cb(null, null);
              } else {
                return cb('日志模型已经存在，不能重复创建');
              }
            } else {
              return cb('日志模型创建失败');
            }
          });
        }, function(result, cb) {
          return logModelDao.create({
            appID: appID,
            type: sLogType,
            attributes: aAttributes
          }, function(err, raw) {
            if (!err) {
              return cb(null, null);
            } else {
              return cb('日志模型创建失败');
            }
          });
        }, function(result, cb) {
          return module.exports['register']({
            appID: appID,
            type: sLogType
          }, function(err) {
            if (!err) {
              return cb(null, null);
            } else {
              return cb('日志模型创建成功，mongo注册注册失败');
            }
          });
        }, function(result, cb) {
          var kue;
          kue = utils.getCtrl('kue');
          kue.processLog({
            appID: appID,
            type: sLogType
          });
          return cb(null);
        }
      ], function(err) {
        if (!err) {
          return res.requestSucceed('日志模型创建成功');
        } else {
          return res.requestError(err);
        }
      });
    }
  },
  update: function(req, res) {
    var aAttributes, appID, sLogType, token;
    appID = req.body.appID;
    token = req.body.token;
    sLogType = req.body.type;
    aAttributes = req.body.attributes;
    if (!appID) {
      return res.requestError('缺少应用ID');
    } else if (!token) {
      return res.requestError('缺少token');
    } else if (!sLogType) {
      return res.requestError('缺少日志类型');
    } else if (sLogType.length > 20) {
      return res.requestError('日志类型的长度不符');
    } else {
      return async.waterfall([
        function(cb) {
          return auth._checkAuth({
            appID: appID,
            token: token
          }, function(err, bAuthorized) {
            if (!err) {
              if (bAuthorized) {
                return cb(null, null);
              } else {
                return cb('应用未授权');
              }
            } else {
              return cb('日志模型更新失败');
            }
          });
        }, function(result, cb) {
          return logModelDao.getOne({
            appID: appID,
            type: sLogType
          }, function(err, oLogModel) {
            if (!err) {
              if (oLogModel) {
                return cb(null, null);
              } else {
                return cb('请先创建日志模型已经存在');
              }
            } else {
              return cb('日志模型更新失败');
            }
          });
        }, function(result, cb) {
          return logModelDao.update({
            appID: appID,
            type: sLogType
          }, {
            attributes: aAttributes
          }, function(err, raw) {
            if (!err) {
              return cb(null, null);
            } else {
              return cb('日志模型更新失败');
            }
          });
        }
      ], function(err, result) {
        if (!err) {
          return res.requestError('日志模型更新成功，重启服务器以生效');
        } else {
          return res.requestError(err);
        }
      });
    }
  },
  get: function(req, res) {
    var appID, type;
    appID = req.query['appID'];
    type = req.query['type'];
    return logModelDao.getOne({
      appID: appID,
      type: type
    }, function(err, oLogModel) {
      if (!err) {
        return res.requestSucceed(oLogModel);
      } else {
        return res.requestError('日志模型列表获取失败');
      }
    });
  },
  _get: function(query, callback) {
    return logModelDao.get(query, callback);
  },
  _getOne: function(query, callback) {
    return logModelDao.getOne(query, callback);
  },
  _listAll: function(callback) {
    return logModelDao.listAll(callback);
  },
  _listAttrValue: function() {
    return _.keys(oAttrValueMap);
  },
  listAttrValue: function() {
    return _.keys(oAttrValueMap);
  },
  register: function(query, callback) {
    return logModelDao.getOne(query, function(err, oLogModel) {
      var aAttributes, appID, oSchema, sLogModelName, sLogType, schema;
      oSchema = {};
      appID = oLogModel.appID;
      sLogType = oLogModel.type;
      aAttributes = oLogModel.attributes;
      sLogModelName = "" + appID + "." + sLogType;
      _.each(aAttributes, function(oAttribute) {
        var key, value;
        key = oAttribute.key;
        value = oAttribute.value;
        return oSchema[key] = oAttrValueMap[value];
      });
      oSchema.ts = {
        type: Date,
        get: utils.formatTime
      };
      oSchema.fileName = String;
      schema = new Schema(oSchema);
      try {
        mongoose.model(sLogModelName, schema);
        return callback(null);
      } catch (_error) {
        err = _error;
        return callback(err);
      }
    });
  },
  registerAll: function(callback) {
    return logModel.find({}, function(err, oLogModels) {
      var aAllLogModels;
      _.each(oLogModels, function(oLogModel) {
        var aAttributes, appID, e, oSchema, sLogModelName, sLogType, schema;
        oSchema = {};
        appID = oLogModel.appID;
        sLogType = oLogModel.type;
        aAttributes = oLogModel.attributes;
        sLogModelName = "" + appID + "." + sLogType;
        _.each(aAttributes, function(oAttribute) {
          var key, value;
          key = oAttribute.key;
          value = oAttribute.value;
          return oSchema[key] = oAttrValueMap[value];
        });
        oSchema.ts = {
          type: Date,
          get: utils.formatTime
        };
        oSchema.fileName = String;
        schema = new Schema(oSchema);
        try {
          return mongoose.model(sLogModelName, schema);
        } catch (_error) {
          e = _error;
        }
      });
      aAllLogModels = _.reduce(oLogModels, function(arr, oLogModel) {
        arr.push({
          type: oLogModel.type,
          appID: oLogModel.appID
        });
        return arr;
      }, []);
      return callback(null, aAllLogModels);
    });
  },
  checkLogModel: function(query, callback) {
    var appID, type;
    appID = query.appID;
    type = query.sLogType;
    return logModelDao.getOne({
      appID: appID,
      type: type
    }, function(err, oLogModel) {
      var bLogModel;
      bLogModel = oLogModel ? true : false;
      return callback(err, bLogModel);
    });
  }
};
