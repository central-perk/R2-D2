// Generated by CoffeeScript 1.7.1
var Schema, async, attrLegal, auth, config, logModel, logModelDao, mongoose, oAttrValueMap, utils, _;

async = require('async');

mongoose = require('mongoose');

_ = require('lodash');

Schema = mongoose.Schema;

logModel = mongoose.model('logModel');

logModelDao = require(process.g.daoPath).logModel;

config = process.g.config;

utils = process.g.utils;

auth = utils.getCtrl('auth');

oAttrValueMap = {
  String: String,
  Number: Number,
  Boolean: Boolean,
  Date: Date
};

attrLegal = function(aAttr) {
  var aName, aUniqueName, bAttrUnique, bNameValid;
  aName = _.flatten(aAttr, 'name');
  aUniqueName = _.uniq(aName);
  bAttrUnique = aName.length === aUniqueName.length;
  bNameValid = true;
  _.each(aAttr, function(oAttr) {
    if (oAttr.name.slice(0, 1) === '_') {
      return bNameValid = false;
    }
  });
  return bAttrUnique && bNameValid;
};

module.exports = {
  create: function(req, res) {
    var aAttr, appID, body, sCname, sName, token;
    body = req.body;
    appID = body.appID;
    token = body.token;
    sName = body.name;
    sCname = body.cname;
    aAttr = body.attr;
    if (!appID) {
      return res.error('缺少应用ID');
    } else if (!token) {
      return res.error('缺少token');
    } else if (!sName) {
      return res.error('缺少日志名称');
    } else if (!sCname) {
      return res.error('缺少日志显示名称');
    } else if (sName.length > 20 || sCname.length > 20) {
      return res.error('日志名称的长度不符');
    } else if (!attrLegal(aAttr)) {
      return res.error('属性不能以下划线开头，且不能重复');
    } else {
      return async.waterfall([
        function(cb) {
          return auth._checkAuth({
            appID: appID,
            token: token
          }, function(err, bAuthorized) {
            if (!err) {
              if (bAuthorized) {
                return cb(null, null);
              } else {
                return cb('应用未授权');
              }
            } else {
              return cb('日志创建失败');
            }
          });
        }, function(result, cb) {
          return logModelDao.getOne({
            appID: appID,
            name: sName
          }, function(err, oLogModel) {
            if (!err) {
              if (!oLogModel) {
                return cb(null, null);
              } else {
                return cb('日志已经存在，不能重复创建');
              }
            } else {
              return cb('日志创建失败');
            }
          });
        }, function(result, cb) {
          return logModelDao.create({
            appID: appID,
            name: sName,
            cname: sCname,
            attr: aAttr
          }, function(err, raw) {
            if (!err) {
              return cb(null, null);
            } else {
              return cb('日志创建失败');
            }
          });
        }, function(result, cb) {
          return module.exports['register']({
            appID: appID,
            name: sName
          }, function(err) {
            if (!err) {
              return cb(null, null);
            } else {
              console.log(err);
              return cb('日志创建成功，mongo注册失败');
            }
          });
        }, function(result, cb) {
          var kue;
          kue = utils.getCtrl('kue');
          kue.processLog({
            appID: appID,
            name: sName
          });
          return cb(null);
        }
      ], function(err) {
        if (!err) {
          return res.success('日志创建成功');
        } else {
          return res.error(err);
        }
      });
    }
  },
  update: function(req, res) {
    var aAttr, appID, body, sCname, sName, token;
    body = req.body;
    appID = body.appID;
    token = body.token;
    sName = body.name;
    sCname = body.cname;
    aAttr = body.attr;
    if (!appID) {
      return res.error('缺少应用ID');
    } else if (!token) {
      return res.error('缺少token');
    } else if (!sName) {
      return res.error('缺少日志名称');
    } else if (!sCname) {
      return res.error('缺少日志显示名称');
    } else if (sName.length > 20 || sCname.length > 20) {
      return res.error('日志名称的长度不符');
    } else if (!attrLegal(aAttr)) {
      return res.error('参数不符合要求，检查是否重复或者包含关键词');
    } else {
      return async.waterfall([
        function(cb) {
          return auth._checkAuth({
            appID: appID,
            token: token
          }, function(err, bAuthorized) {
            if (!err) {
              if (bAuthorized) {
                return cb(null, null);
              } else {
                return cb('应用未授权');
              }
            } else {
              return cb('日志更新失败');
            }
          });
        }, function(result, cb) {
          return logModelDao.getOne({
            appID: appID,
            name: sName
          }, function(err, oLogModel) {
            if (!err) {
              if (oLogModel) {
                return cb(null, null);
              } else {
                return cb('日志已经存在');
              }
            } else {
              return cb('日志更新失败');
            }
          });
        }, function(result, cb) {
          return logModelDao.update({
            appID: appID,
            name: sName
          }, {
            cname: sCname,
            attr: aAttr
          }, function(err, raw) {
            if (!err) {
              return cb(null, null);
            } else {
              return cb('日志更新失败');
            }
          });
        }
      ], function(err, result) {
        if (!err) {
          return res.error('日志更新成功，重启服务器以生效');
        } else {
          return res.error(err);
        }
      });
    }
  },
  get: function(req, res) {
    var appID, name;
    appID = req.query['appID'];
    name = req.query['name'];
    return logModelDao.getOne({
      appID: appID,
      name: name
    }, function(err, oLogModel) {
      if (!err) {
        console.log(oLogModel);
        return res.success(oLogModel);
      } else {
        return res.error('日志列表获取失败');
      }
    });
  },
  _get: function(query, callback) {
    return logModelDao.get(query, callback);
  },
  _getOne: function(query, callback) {
    return logModelDao.getOne(query, callback);
  },
  _listAll: function(callback) {
    return logModelDao.listAll(callback);
  },
  _listAttrValue: function() {
    return _.keys(oAttrValueMap);
  },
  listAttrValue: function() {
    return _.keys(oAttrValueMap);
  },
  register: function(query, callback) {
    return logModelDao.getOne(query, function(err, oLogModel) {
      var aAttr, appID, oSchema, sCname, sLogModelName, sName, schema;
      oSchema = {};
      appID = oLogModel.appID;
      sName = oLogModel.name;
      sCname = oLogModel.cname;
      aAttr = oLogModel.attr;
      sLogModelName = "" + appID + "." + sName;
      _.each(aAttr, function(attr) {
        var cname, dataType, name;
        name = attr.name;
        cname = attr.cname;
        dataType = attr.dataType;
        return oSchema[name] = oAttrValueMap[dataType];
      });
      oSchema._ts = {
        type: Date,
        get: utils.formatTime
      };
      oSchema._fileName = String;
      oSchema._level = Number;
      schema = new Schema(oSchema);
      try {
        mongoose.model(sLogModelName, schema);
        return callback(null);
      } catch (_error) {
        err = _error;
        return callback(err);
      }
    });
  },
  registerAll: function(callback) {
    return logModel.find({}, function(err, oLogModels) {
      var aAllLogModels;
      _.each(oLogModels, function(oLogModel) {
        var aAttr, appID, e, oSchema, sCname, sLogModelName, sName, schema;
        oSchema = {};
        appID = oLogModel.appID;
        sName = oLogModel.name;
        sCname = oLogModel.cname;
        aAttr = oLogModel.attr;
        sLogModelName = "" + appID + "." + sName;
        _.each(aAttr, function(attr) {
          var cname, dataType, name;
          name = attr.name;
          cname = attr.cname;
          dataType = attr.dataType;
          return oSchema[name] = oAttrValueMap[dataType];
        });
        oSchema.ts = {
          type: Date,
          get: utils.formatTime
        };
        oSchema.fileName = String;
        oSchema.level = Number;
        schema = new Schema(oSchema);
        try {
          return mongoose.model(sLogModelName, schema);
        } catch (_error) {
          e = _error;
        }
      });
      aAllLogModels = _.reduce(oLogModels, function(arr, oLogModel) {
        arr.push({
          appID: oLogModel.appID,
          name: oLogModel.name,
          cname: oLogModel.cname
        });
        return arr;
      }, []);
      return callback(null, aAllLogModels);
    });
  },
  checkLogModel: function(query, callback) {
    var appID, name;
    appID = query.appID;
    name = query.name;
    return logModelDao.getOne({
      appID: appID,
      name: name
    }, function(err, oLogModel) {
      var bLogModel;
      bLogModel = oLogModel ? true : false;
      return callback(err, bLogModel);
    });
  }
};
