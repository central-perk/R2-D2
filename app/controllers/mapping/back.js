// Generated by CoffeeScript 1.7.1
var PERPAGE, async, auth, config, fListAM, fs, logModel, mongoose, path, utils, viewsPath, _;

path = require('path');

fs = require('fs-extra');

_ = require('lodash');

async = require('async');

mongoose = require('mongoose');

config = process.g.config;

utils = process.g.utils;

auth = utils.getCtrl('auth');

logModel = utils.getCtrl('logModel');

viewsPath = process.g.viewsPath;

PERPAGE = config.PERPAGE;

fListAM = function(callback) {
  return async.auto({
    aAuth: function(cb) {
      return auth._listAll(cb);
    },
    aLogModels: function(cb) {
      return logModel._listAll(cb);
    }
  }, callback);
};

module.exports = {
  index: function(req, res) {
    var nav;
    nav = config.BACK.nav;
    return fListAM(function(err, oListAM) {
      var aAuth, aDynamicNav, aLogModels;
      aDynamicNav = [];
      if (!err) {
        aAuth = oListAM.aAuth;
        aLogModels = oListAM.aLogModels;
        _.each(aAuth, function(oAuth) {
          var temp;
          temp = {
            title: oAuth.appName,
            href: oAuth.appID
          };
          if (aLogModels.length) {
            temp.sub = [];
          }
          _.each(aLogModels, function(oLogModel) {
            if (oLogModel.appID === oAuth.appID) {
              return temp.sub.push({
                title: oLogModel.type,
                href: "" + oAuth.appID + "." + oLogModel.type
              });
            }
          });
          return aDynamicNav.push(temp);
        });
      }
      nav = nav.concat(aDynamicNav);
      return res.render('back/index.html', {
        nav: nav
      });
    });
  },
  getContent: function(req, res) {
    var Model, aLogModelsList, appID, e, module, page, sLogType;
    module = req.params['module'];
    switch (module) {
      case 'auth':
        return auth._listAll(function(err, aAuthList) {
          return res.render('back/auth.html', {
            aAuthList: aAuthList
          });
        });
      case 'logmodel':
        aLogModelsList = [];
        return fListAM(function(err, oListAM) {
          var aAttrValue, aAuth, aLogModels;
          if (!err) {
            aAuth = oListAM.aAuth;
            aLogModels = oListAM.aLogModels;
            _.each(aAuth, function(oAuth) {
              return _.each(aLogModels, function(oLogModel) {
                if (oAuth.appID === oLogModel.appID) {
                  return aLogModelsList.push({
                    appName: oAuth.appName,
                    appID: oAuth.appID,
                    token: oAuth.token,
                    type: oLogModel.type,
                    ts: oLogModel.ts
                  });
                }
              });
            });
          }
          aAttrValue = logModel._listAttrValue();
          return res.render('back/logmodel.html', {
            aLogModelsList: aLogModelsList,
            aAuth: aAuth,
            aLogModels: aLogModels,
            aAttrValue: aAttrValue
          });
        });
      default:
        appID = module.split('.')[0];
        sLogType = module.split('.')[1];
        page = (req.param('page') > 0 ? req.param('page') : 1) - 1;
        try {
          Model = mongoose.model(module);
          return async.auto({
            getOneAuth: function(cb) {
              return auth._getOne({
                appID: appID
              }, cb);
            },
            getOneModel: function(cb) {
              return logModel._getOne({
                appID: appID,
                type: sLogType
              }, cb);
            },
            getLogs: function(cb) {
              return Model.find({}, '-__v -_id -fileName').sort({
                ts: -1
              }).skip(PERPAGE * page).limit(PERPAGE).exec(cb);
            },
            pageAmount: function(cb) {
              return Model.count({}, function(err, num) {
                return cb(err, Math.round(num / PERPAGE));
              });
            }
          }, function(err, results) {
            var aLogKeys, aLogs, nPageAmount, oAuth, oLogModel, temp, token, ts, url, _aLogs;
            if (!err) {
              oAuth = results.getOneAuth;
              oLogModel = results.getOneModel;
              nPageAmount = results.pageAmount;
              _aLogs = results.getLogs;
              token = oAuth.token;
              ts = oLogModel.ts;
              url = "/?type=" + sLogType + "&appID=" + appID;
              url += "&token=" + token + "&ts={{Date.getTime()}}";
              _.each(oLogModel.attributes, function(oAttr) {
                return url += "&" + oAttr.key + "={{" + oAttr.value + "}}";
              });
              if (_aLogs.length) {
                aLogKeys = _.keys(_aLogs[0]._doc);
                aLogKeys = _.pull(aLogKeys, 'ts');
                aLogKeys.push('ts');
                aLogs = [];
                _.each(_aLogs, function(oLog) {
                  var temp;
                  temp = {};
                  _.each(aLogKeys, function(sLogkey) {
                    return temp[sLogkey] = oLog[sLogkey];
                  });
                  return aLogs.push(temp);
                });
                temp = {
                  url: url,
                  appID: appID,
                  type: sLogType,
                  ts: ts,
                  aLogs: aLogs,
                  aLogKeys: aLogKeys,
                  nPageAmount: nPageAmount,
                  page: page + 1
                };
              } else {
                temp = {
                  url: url,
                  appID: appID,
                  type: sLogType,
                  ts: ts
                };
              }
              return res.render('back/apps.html', temp);
            } else {
              return res.render('授权信息出错了!');
            }
          });
        } catch (_error) {
          e = _error;
          return res.send('日志模型不存在!');
        }
    }
  }
};
